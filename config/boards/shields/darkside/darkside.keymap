/*
 * Copyright (c) 2020 The ZMK Contrwi7876butors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT	0
#define FN   1
#define NUMPAD	2

/ {
    behaviors {
        hota: hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD-TAP";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };



    keymap {
        compatible = "zmk,keymap";

// | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  |																 | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  |
// | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  |	 															 | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  |
// | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  |	 															 | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  |
// | SW1  | SW1  | SW1  | SW1  | SW1  | SW1  |				 														 		| SW1  | SW1  | SW1  | SW1  | SW1  | SW1  |
// | SW1  | SW1  | SW1  | SW1  | SW1  |																			     			   | SW1  | SW1  | SW1  | SW1  | SW1  |
// 													| SW1  |											| SW1  |
// 													| SW1  | SW1  | SW1  |				  | SW1  | SW1  | SW1  |	

        default_layer {
            bindings = <
    &kp ESC			&kp N1			&kp N2			&kp N3			&kp N4		&kp N5		&kp C_VOLUME_UP																		&kp C_PLAY_PAUSE	&kp N6		&kp N7			&kp N8				&kp N9			&kp N0			&kp MINUS
    &kp TAB			&kp Q			&kp W			&kp E			&kp R		&kp T		&kp C_VOLUME_DOWN																	&kp C_NEXT			&kp Y		&kp U			&kp I				&kp O			&kp P			&kp BSLH
    &lt FN BSPC		&kp A			&kp S			&kp D			&kp F		&kp G		&kp C_MUTE																			&kp C_PREV			&kp H		&kp J			&kp K				&kp L			&kp SEMI  		&lt FN APOS
    &kp LSHFT 		&kp Z			&kp X			&kp C			&kp V		&kp B 	        																									&kp N		&kp M			&kp COMMA			&kp DOT			&kp FSLH  		&kp RSHFT
    &kp LCTRL 		&kp LGUI 		&kp LALT 		&hota HOME LEFT	&hota END RIGHT 																															&hota PG_UP UP 	&hota PG_DN DOWN 	&mt RALT LBKT  	&kp RGUI RBKT  	&kp RCTRL
																							&hota LGUI ESC																	&hota RGUI DEL
																							&mt LCTRL SPACE	&mt LSHFT BSPC &mt LALT TAB		&mt LALT RET 	&mt LSHFT BSPC	&mt LCTRL SPACE
            >;
        };


        fn_layer {
            bindings = <
    &hota ESC GRAVE	&kp F1			&kp F2			&kp F3			&kp F4		&kp F5		&kp F11																		&kp F12		&kp F6		&kp N7			&kp F8			&kp F9		&kp F10		&kp EQUAL
    &to NUMPAD		&kp EXCL	  	&kp AT		 	&kp LBRC		&kp RBRC	&kp PIPE	&trans																		&trans		&trans		&kp HOME		&kp UP			&kp END		&kp DEL		&to NUMPAD
    &trans			&kp HASH		&kp DOLLAR		&kp LPAR		&kp RPAR	&kp GRAVE	&kp PAUSE_BREAK																&kp INS		&trans		&kp LEFT		&kp DOWN		&kp RIGHT	&trans  	&trans
    &trans 			&kp PRCNT		&kp CARET		&kp LBKT		&kp RBKT	&kp TILDE      	   																					&trans		&trans			&trans			&trans		&trans  	&trans
    &trans 			&kp AMPS		&kp ASTRK		&kp HOME 		&kp END 																													&kp PG_UP  		&kp PG_DN 		&trans  	&trans  	&trans
																									&trans			 											&trans
																									&trans		&trans	&trans			&trans 		&trans		&trans
            >;
        };
		
        numpad_layer {
            bindings = <
    &trans			&bt BT_SEL 0 	&bt BT_SEL 1 	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4	&trans																		&trans		&trans		&trans			&trans			&trans		&trans			&trans
    &trans			&out OUT_USB	&out OUT_BLE	&out OUT_TOG	&trans			&trans			&trans																		&trans		&kp UP		&kp KP_N7		&kp KP_N8		&kp KP_N9	&kp KP_MULTIPLY	&trans
    &to DEFAULT		&trans			&trans			&trans			&trans			&trans			&bt BT_CLR																	&trans		&kp DOWN	&kp KP_N4		&kp KP_N5		&kp KP_N6	&kp KP_PLUS		&to DEFAULT
    &trans 			&trans			&trans			&trans			&trans			&trans      	   																						&trans		&kp KP_N1		&kp KP_N2		&kp KP_N3	&kp KP_DIVIDE	&trans
    &trans 			&trans 			&trans 			&trans 			&trans																																&trans 			&kp KP_DOT		&kp KP_N0	&kp KP_EQUAL	&trans
																									&trans														&trans
																									&trans		&trans	&trans			&trans 		&trans		&trans
            >;
        };

    };
};